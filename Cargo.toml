[package]
name = "sealedinfra"
version = "0.1.33"
edition = "2021"
homepage = "https://github.com/auser/sealedinfra"
authors = ["Ari Lerner <me@ari.io>"]
repository = "https://github.com/auser/sealedinfra"
description = "Better infrastructure for better control and code"
license = "MIT"

[[bin]]
name = "si"
path = "src/main.rs"

[package.metadata.wix]
upgrade-guid = "321692D7-6D7E-4DA8-9B83-C03D3969FFA6"
path-guid = "FD648F90-07D7-4B9D-9823-AB9FFD19325D"
license = false
eula = false

[dependencies]
anyhow = "1.0.86"
async-recursion = "1.1.1"
axum = { version = "0.7.5", features = ["macros", "ws"] }
bstr = "1.10.0"
chrono = { version = "0.4.38", features = ["serde"] }
clap = { version = "4.5.14", features = ["derive", "unstable-doc"] }
config = "0.14.0"
dotenv = { version = "0.15.0", features = ["clap"] }
env_logger = "0.11.5"
futures = "0.3.30"
git-url-parse = { version = "0.4.5", features = ["tracing"] }
git2 = { version = "0.19.0" }
hex = { version = "0.4.3", features = ["serde"] }

k8s-openapi = { version = "0.23.0", features = ["v1_30"] }
kube = { version = "0.95", features = ["runtime", "derive", "client"] }
log = { version = "0.4.22", features = ["serde"] }
mdbook-linkcheck = "0.7.7"
mdbook-toc = "0.14.2"
memmem = "0.1.1"
num_cpus = "1.16.0"
openssl = { version = "0.10.66", features = ["vendored"] }
resolve-path = "0.1.0"
schemars = { version = "0.8.21", features = ["uuid", "chrono"] }
serde = { version = "1.0.205", features = ["derive"] }
serde_json = "1.0.128"
serde_yaml = "0.9.34"
sha1 = "0.10.6"
shell-escape = "0.1.5"
sqlx = { version = "0.8.0", features = [
  "runtime-tokio-native-tls",
  "postgres",
  "chrono",
  "uuid",
  "runtime-async-std-native-tls",
  "sqlite",
] }
tempfile = "3.12.0"
thiserror = "1.0.63"
tokio = { version = "1.39.2", features = ["full", "macros", "rt-multi-thread"] }
tower-http = { version = "0.6", features = ["fs", "cors"] }
tracing = { version = "0.1.40", features = ["log"] }
tracing-subscriber = { version = "0.3.18", features = ["env-filter"] }
utoipa = { version = "4.2.3", features = [
  "axum_extras",
  "openapi_extensions",
  "chrono",
] }
utoipa-swagger-ui = { version = "7.1.0", features = ["axum"] }


[dependencies.libsqlite3-sys]
version = "0.30"
features = ["bundled"]

[dev-dependencies]
tempfile = "3.12.0"
sqlx = { version = "0.8.0", features = [
  "runtime-tokio-native-tls",
  "postgres",
  "chrono",
  "uuid",
] }

[build-dependencies]
vergen-gitcl = { version = "1", features = ["build", "cargo", "rustc"] }
anyhow = "1.0.86"

# The profile that 'cargo dist' will build with
[profile.dist]
inherits = "release"
lto = "thin"

[workspace.metadata.release]
shared-version = true
tag-name = "v{{version}}"
pre-release-commit-message = "release: {{version}}"
publish = false

# Config for 'cargo dist'
[workspace.metadata.dist]
# The preferred cargo-dist version to use in CI (Cargo.toml SemVer syntax)
cargo-dist-version = "0.22.1"
# CI backends to support
ci = "github"
# The installers to generate for each app
installers = ["shell", "npm", "homebrew", "msi"]
# A GitHub repo to push Homebrew formulas to
tap = "auser/homebrew-tap"
# Publish jobs to run in CI
publish-jobs = ["homebrew"]
# Target platforms to build apps for (Rust target-triple syntax)
targets = [
  "aarch64-apple-darwin",
  "x86_64-apple-darwin",
  "x86_64-unknown-linux-gnu",
  "x86_64-pc-windows-msvc",
]
# Which actions to run on pull requests
pr-run-mode = "plan"
# The archive format to use for windows builds (defaults .zip)
windows-archive = ".tar.gz"
# The archive format to use for non-windows builds (defaults .tar.xz)
unix-archive = ".tar.gz"
# Whether to install an updater program
install-updater = false
github-repo = "auser/sealedinfra"
# Where to host releases
hosting = "github"
# Whether to enable GitHub Attestations
github-attestations = true
# Path that installers should place binaries in
install-path = "CARGO_HOME"

[[workspace.metadata.dist.extra-artifacts]]
artifacts = ["dist-manifest-schema.json"]
build = [
  "cargo",
  "run",
  "--release",
  "--",
  "dist",
  "manifest-schema",
  "--output=dist-manifest-schema.json",
]
